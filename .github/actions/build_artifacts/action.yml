name: Build Artifacts
description: Run build and push artifacts to ECR and Artifactory, also scan the package
inputs:
  CAI_ARTIFACTORY_USER:
    description: "The Artifactory username"
    required: true
  CAI_ARTIFACTORY_TOKEN:
    description: "The Artifactory token"
    required: true
  ACCOUNT_ID:
    description: "ID of non-prod AWS account"
    required: true
  ACCOUNT_NAME:
    description: "Name of non-prod AWS account"
    required: false
  COMPONENT_ID:
    description: "Component ID"
    required: true
  IMAGE_NAME:
    description: "The name of the docker image"
    required: true
  APP_VERSION:
    description: "Application version"
    required: true
  AWS_REGION:
    description: "AWS Region"
    default: us-east-1
  GITHUB_TOKEN:
    description: "Github token for can with ERS Security Orchestrator step"
    required: true
  CHANGE_ID:
    required: false
    description: CRQ for AWS Secure access

runs:
  using: "composite"
  steps:
    - name: Scan with ERS Security Orchestrator
      uses: Product-Security-Engineering/security-orchestrator-action@v1.2
      with:
        github_token : ${{ inputs.GITHUB_TOKEN }}
        componentId  : ${{ inputs.COMPONENT_ID }}
        blocking     : false
        file         : target/evj-api-${{ inputs.APP_VERSION }}.jar

    - name: Access your AWS Account
      uses: cai-actions/aws-secure-access@v1
      with:
        account: ${{ inputs.ACCOUNT_ID }}
        change_id: ${{ inputs.CHANGE_ID }}

    - name: Load a Hierachy of Values from Parameter Store per environment
      uses: MAN-actions/parameter-store@v1.0.2
      with:
        path: /acctmgmt/global/newrelic
        recursive: true
        naming   : relative
        # prefix   : GLOBAL
        mask     : true

    - name: Update NewRelic license key
      shell: bash
      run: |
        curl -L -o newrelic.jar https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic.jar
        sed -i -e "s/%license_key%/${{ env.NEW_RELIC_API_KEY }}/g" newrelic.yml

    - name: Build Docker Image
      uses: MAN-Actions/docker-build@v1.2.0
      id: build_docker_image
      with:
        working_directory : "./"
        dockerfile        : "Dockerfile"
        artifactory_user  : ${{ inputs.CAI_ARTIFACTORY_USER }}
        artifactory_token : ${{ inputs.CAI_ARTIFACTORY_TOKEN }}
        push              : "true"
        image_name        : ${{ inputs.IMAGE_NAME }}
        build_args        : "version=${{ inputs.APP_VERSION }}"
        tags              : "${{ github.sha }}-${{ github.run_number}}"

    - name: Push Docker Image to ECR
      uses: MAN-Actions/ecr-deploy@v1
      with:
        change_id         : ${{ inputs.CHANGE_ID }}
        artifactory_user  : ${{ inputs.CAI_ARTIFACTORY_USER }}
        artifactory_token : ${{ inputs.CAI_ARTIFACTORY_TOKEN }}
        aws_account       : ${{ inputs.ACCOUNT_ID }}
        ecr_registry      : "${{ inputs.ACCOUNT_ID }}.dkr.ecr.${{ inputs.AWS_REGION }}.amazonaws.com"
        image_name        : ${{ inputs.IMAGE_NAME }}
        image_label       : "${{ github.sha }}-${{ github.run_number}}"
